#!/bin/bash
# Merge two SRT subtitle files. Only the first subtitle timestamp is
# preserved. Merging by subtitle sequence number where the
# sequence_offset adjust sequence number between the two.

SAVEIFS=$IFS
IFS=$(echo -en "\n\b")	# to support space in file name
SEQ_OFF=$3		# sequence number offset
CUR_SEQ=0		# current processed sequence number

usage() {
	echo $1 "<subtitle 1> <subtitle 2> [sequence_offset]"
	exit
}

# Trim Window carriage return for later empty line parsing
trim() {
	local var="$*"
	var="${var%"${var##*[![:space:]]}"}"
	echo -n "$var"
}

# Dump or skip one sequence of subtitle. Return false if EOF
dump_on_sub_seq() {
	fd=$1		# file descriptor, 0 for 1st subtitle 1, 3 for 2nd subtile
	skip=$2		# skip 2 lines for 2nd subtitle since its timestamp is not needed
	font=$3 	# add <i>, <b> etc wrapper to highlight subtitle text

	# skip leading empty lines
	while read -u $fd line; do
		line=$(trim $line)
		[ ! -z "$line" ] && break
	done

	# EOF
	[ -z $line ] && return -1

	# dump sequence number and timestamp portion
	CUR_SEQ=$line
	(( skip-- ))
	[ $skip -ge 0 ] || echo $line
	if read -u $fd line; then
		line=$(trim $line)
		(( skip-- ))
		[ $skip -ge 0 ] || echo $line 
	fi

	# dump subtitle text portion
	while read -u $fd line; do
		line=$(trim $line)
		[ -z "$line" ] && break
		(( skip-- ))
		if [[ $skip -lt 0 ]]; then
			if [ ! -z $font ]; then
				echo "<$font>"$line"</$font>"
			else
				echo $line 
			fi
		fi
	done
	return 0
}

[ $# -lt 2 ] && usage $0
offset=$SEQ_OFF
while true; do
	# adjust start sequences; dump first n sequences of 1st substile
	if [[ $offset -gt 0 ]]; then
		dump_on_sub_seq 0 0 || break
		(( offset-- ))
		echo	# leave an empty line
		continue
	fi 

	# adjust start sequences; skip first n sequences of 1st subtitle
	if [[ $offset -lt 0 ]]; then
		>> /dev/null dump_on_sub_seq 3 0
		(( offset++ ))
		continue
	fi

	# dump one sequence of 1st subtitle
	dump_on_sub_seq 0 0 || break

	# dump one sequence of 2nd subtitle
	seq=$CUR_SEQ
	dump_on_sub_seq 3 2 "i" || continue
	(( idx_diff=seq-SEQ_OFF-CUR_SEQ ))
	if [[ $idx_diff -ne 0 ]]; then
		>&2 echo "Error: $1:$seq mismatch $2:$CUR_SEQ"
		break;
	fi

	# Leave an empty line between merged sequence
	echo
done < $1 3< $2
IFS=$SAVEIFS
